스택 메모리와 힙 메모리

스택 메모리 단점
1.수명
함수가 반환하면 그 안에 있던 데이터 다 날아감
그러지 않고 데이터를 오래 보전하려면 전역변수 또는 static

2.크기
스택메모리는 특정 용도에 쓰라고 별도로 뗴어 놓은 메모리
그 크기는 컴파일 시에 결정하므로 너무 크게 모 잡음
엄청 큰 데이터를 처리해야 할 경우 스택 메모리에 못 넣음

힙 메모리
컴퓨터에 존재하는 범용적 메모리
스택 메모리 처럼 특정 용도로 떼어 놓은 게 아님
스택과 달리 컴파일러 및 CPU가 자동적으로 메모리 관리를 안 해줌
따라서 프로그래머가 원하는 때 원하는 만큼 메모리를 할당 받아와서
사용하고 원할 때 반납(해제) 할 수 있다.

장점
용량 제한이 없음(컴퓨터에 남아있는 메모리 만큼 사용가능)
프로그래머가 데이터의 수명을 직접 제어

단점
빌려온 메모리를 직접 해제 안 하면 누구도 그 메모리를 쓸 수 없음
스택에 비해 할당/해제 속도가 느림
메모리 공간에 구멍이 생긴다. (효율적으로 쓸수는 없다)

스택 메모리는 정적 메모리
이미 공간이 따로 잡혀 있음
할당/해제가 자동으로 관리되게 코드가 컴파일된다.
오프셋 개념으로 정확하게 몇 바이트씩 사용해야 하는지 
컴파일 결정

힙 메모리는 동적 메모리

실행 중에 크기와 할당/해제 시기가 결정된다.


memory allocation


동적 메모리
1.메모리 할당 void* 반환을 받는다 (어떤 주소는 담을 수 있는 주소)
2.메모리 사용 int* nums = (int*)malloc(SIZE)
3.메모리 반납/해제 free(nums)


메모리 할당 함수가 반환한 주소를 그대로 포인터 연산에 사용하면
메모리 해제할 때 문제가 발생할 수도 있음
최초에 받아온 주소가 아니라 다른 위치를 가리킴
->그 주소로 메모리 해제 요청 -> 결과가 정의되지 않음

코딩표준: 할당 받은 포인터로 연산 금지!
메모리 할당 함수에서 받아온 포인터(주소), 포인터 연산에 사용하는
포인터를 분리하자

void* nums; ->열쇠 담당
int* p;
int i;

nums = malloc(LENGTH * sizeof(int));
p =(int*) nums;

for(i = 0; i < LENGTH; ++i) {
  *P++ = 10 *( i +1);

free(nums)
nums = NULL;

p =(int*) nums;

for(i = 0; i < LENGTH; ++i) {
  *P++ = 10 *( i +1);


코딩표준: 해제 후 널 포인터를 대입
free(nums)
nums = NULL;


#include <stdio.h>
#include <stdlib.h>

void InputScores(int *base,int asize); //asize 명의 성적을 입력받는 함수
void ViewScores(int *base,int asize); //asize 명의 성적을 출력하는 함수
int InputScore(int num); //num 번의 학생 성적을 입력받는 함수

int main()
{
    int *base = 0;  //동적으로 할당받아 학생들의 성적을 관리할 메모리의 시작 주소
    int max_stu= 0;   //관리할 학생 수
    printf("최대 관리할 학생 수를 입력하세요.\n");
    scanf_s("%d",&max_stu);
    base = (int *)malloc(sizeof(int) * max_stu); //성적을 보관할 메모리를 할당
    InputScores(base,max_stu); //학생들의 성적 입력 요청
    ViewScores(base,max_stu); //학생들의 성적 출력
    free(base); //동적으로 할당한 메모리 해제
    return 0;
}
void InputScores(int* base,int asize)
{
    int i = 0;
    for(i = 0;  i<asize; i++)
    {
        base[i] = InputScore(i+1); //i+1 번의 학생 성적을 입력받아 base[i]에 대입
    }
}
void ViewScores(int *base,int asize)
{
    int i = 0;
    for(i = 0;  i<asize; i++)
    {
        printf("%d 번: %d \n",i+1, base[i]); //i+1 번의 성적 출력
    }
}
int InputScore(int num)
{
    int score;
    printf("%d 번의 성적을 입력하세요.\n",num);
    scanf("%d",&score);
    return score;
}



void* calloc(size_t num, size_t size);
void* nums = calloc(LENGTH, sizeof(int));
free(nums);
nums = NULL;

모든 바이트를 0으로 초기화 해줌
void* memset(void* dest, int ch, size_t count);
char로 초기화(1바이트씩)됨
그외의 자료형으로 초기화 하려면 직접 for 문을 써야함
count가 dest의 영역을 넘어 설 경우 (소유하지 않은 메모리에 쓰기)
dest가 널 포인터일 경우(널 포인터 역참조)
void* nums;

nums = malloc(LENGTH * sizeof(int));
memset(nums, 0, LENGTH * sizeof(int));

free(nums);
nums = NULL;



void* realloc(void* ptr, size_t new_size);

이미 존재하는 메모리(ptr)의 크기를 new_size 바이트로 변경
새로운 크기가 허용하는 한 기존 데이터를 그대로 유지
성공시, 새롭게 할당된 메모리의 시작 주소를 반환하며 기존 메모리 해제됨
실패시, NULL을 반환하지만 기존 메모리는 해제되지 않음
메모리 누수 발생
그러나 그 주소를 잃어버려서 해제할 수 없다.
1.지금 갖고 있는 메모리 뒤에 충분한 공간이 없으면 새로운 메모리를 할당한 뒤,
   기존 내용을 복사하고 새 주소 반환

2. 지금 갖고 있는 메모리 뒤에 공간이 충분하다면 그냥 기존 주소를 반환(보장X)
   그리고 추가된 공간을 쓸 수 있게 됨


realloc 실패시 보완


void ReallocExample()
{
   // malloc 조건문은 생략
   char* buffer = (char)malloc(4);

   // buffer 백업
   char* backupBuffer = buffer;

   if( NULL == (buffer =(char*)realloc(buffer, 8) )
   {
      // 종료 시
      free(backupBuffer);
      fprintf(stderr, "Memory allocation is failed");
      exit(1);

      // 프로그램 계속 진행할 시 주소 복구
      // buffer = backupBuffer;
   }


   // Do something..
}
realloc 실패할 경우
